# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# The OpenAPI Generator Community, © Public Domain, 2022
# API DemoUserApi

extends DemoApiBee
class_name DemoUserApi

# Operation createUser → POST /user
# Create user
#
# This can only be done by the logged in user.
func create_user(
	# demoUser: DemoUser
	# Created user object
	demoUser: DemoUser,
	on_success: Callable = Callable(),  # func(result)
	on_failure: Callable = Callable(),  # func(error: DemoApiError)
):
	# CollectionFormat: NO

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self.bee_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/v2/user"

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_consumable_by_server := ['application/json']
	var bzz_found_producible_mime := false
	for bzz_mime in BEE_PRODUCIBLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_consumable_by_server:
			bzz_headers["Content-Type"] = bzz_mime
			bzz_found_producible_mime = true
			break
	if not bzz_found_producible_mime:
		# This is a bit strict, perhaps we could just push a warning and send JSON anyway?
		var error := DemoApiError.new()
		error.identifier = "create_user.headers.content_type"
		error.message = "That endpoint only accepts %s as content type(s) and none are supported by this client."
		on_failure.call(error)
		return

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null
	bzz_body = demoUser

	self.bee_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_result, bzz_code, bzz_headers):
			on_success.call(bzz_result)
			,  # ざわ‥
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)

# Operation createUsersWithArrayInput → POST /user/createWithArray
# Creates list of users with given input array
func create_users_with_array_input(
	# user: Array
	# List of user object
	user: Array,
	on_success: Callable = Callable(),  # func(result)
	on_failure: Callable = Callable(),  # func(error: DemoApiError)
):
	# CollectionFormat: NO

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self.bee_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/v2/user/createWithArray"

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_consumable_by_server := ['application/json']
	var bzz_found_producible_mime := false
	for bzz_mime in BEE_PRODUCIBLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_consumable_by_server:
			bzz_headers["Content-Type"] = bzz_mime
			bzz_found_producible_mime = true
			break
	if not bzz_found_producible_mime:
		# This is a bit strict, perhaps we could just push a warning and send JSON anyway?
		var error := DemoApiError.new()
		error.identifier = "create_users_with_array_input.headers.content_type"
		error.message = "That endpoint only accepts %s as content type(s) and none are supported by this client."
		on_failure.call(error)
		return

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null
	bzz_body = user

	self.bee_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_result, bzz_code, bzz_headers):
			on_success.call(bzz_result)
			,  # ざわ‥
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)

# Operation createUsersWithListInput → POST /user/createWithList
# Creates list of users with given input array
func create_users_with_list_input(
	# user: Array
	# List of user object
	user: Array,
	on_success: Callable = Callable(),  # func(result)
	on_failure: Callable = Callable(),  # func(error: DemoApiError)
):
	# CollectionFormat: NO

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self.bee_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/v2/user/createWithList"

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_consumable_by_server := ['application/json']
	var bzz_found_producible_mime := false
	for bzz_mime in BEE_PRODUCIBLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_consumable_by_server:
			bzz_headers["Content-Type"] = bzz_mime
			bzz_found_producible_mime = true
			break
	if not bzz_found_producible_mime:
		# This is a bit strict, perhaps we could just push a warning and send JSON anyway?
		var error := DemoApiError.new()
		error.identifier = "create_users_with_list_input.headers.content_type"
		error.message = "That endpoint only accepts %s as content type(s) and none are supported by this client."
		on_failure.call(error)
		return

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null
	bzz_body = user

	self.bee_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_result, bzz_code, bzz_headers):
			on_success.call(bzz_result)
			,  # ざわ‥
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)

# Operation deleteUser → DELETE /user/{username}
# Delete user
#
# This can only be done by the logged in user.
func delete_user(
	# username: String   Eg: username_example
	# The name that needs to be deleted
	username: String,
	on_success: Callable = Callable(),  # func(result)
	on_failure: Callable = Callable(),  # func(error: DemoApiError)
):
	# CollectionFormat: NO

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self.bee_convert_http_method("DELETE")

	# Compute the URL path to the API resource
	var bzz_path := "/v2/user/{username}".replace("{" + "username" + "}", bee_urlize_path_param(username))

	# Collect the headers
	var bzz_headers := Dictionary()

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self.bee_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_result, bzz_code, bzz_headers):
			on_success.call(bzz_result)
			,  # ざわ‥
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)

# Operation getUserByName → GET /user/{username}
# Get user by user name
func get_user_by_name(
	# username: String   Eg: username_example
	# The name that needs to be fetched. Use user1 for testing.
	username: String,
	on_success: Callable = Callable(),  # func(result: User)
	on_failure: Callable = Callable(),  # func(error: DemoApiError)
):
	# CollectionFormat: NO

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self.bee_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/v2/user/{username}".replace("{" + "username" + "}", bee_urlize_path_param(username))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/xml', 'application/json']
	for bzz_mime in BEE_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self.bee_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_result, bzz_code, bzz_headers):
			bzz_result = DemoUser.bee_denormalize_single(bzz_result)
			on_success.call(bzz_result)
			,  # ざわ‥
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)

# Operation loginUser → GET /user/login
# Logs user into the system
func login_user(
	# username: String   Eg: username_example
	# The user name for login
	username: String,
	# password: String   Eg: password_example
	# The password for login in clear text
	password: String,
	on_success: Callable = Callable(),  # func(result: String)
	on_failure: Callable = Callable(),  # func(error: DemoApiError)
):
	# CollectionFormat: NO

	# Validate param `username` constraints
	var bzz_username_regex := RegEx.new()
	bzz_username_regex.compile("/^[a-zA-Z0-9]+[a-zA-Z0-9\\.\\-_]*[a-zA-Z0-9]+$/".trim_prefix('/').trim_suffix('/'))
	if not bzz_username_regex.search(str(username)):
		var error := DemoApiError.new()
		error.identifier = "login_user.param.validation.pattern"
		error.message = "Invalid value for `username`, must conform to the pattern `/^[a-zA-Z0-9]+[a-zA-Z0-9\\.\\-_]*[a-zA-Z0-9]+$/`."
		on_failure.call(error)
		return

	# Validate param `password` constraints
	if (password is String) and password.length() > 7:
		var error := DemoApiError.new()
		#error.internal_code = ERR_INVALID_PARAMETER
		error.identifier = "login_user.param.validation.max_length"
		error.message = "Invalid length for `password`, must be smaller than or equal to 7."
		on_failure.call(error)
		return

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self.bee_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/v2/user/login"

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/xml', 'application/json']
	for bzz_mime in BEE_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["username"] = username
	bzz_query["password"] = password

	var bzz_body = null

	self.bee_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_result, bzz_code, bzz_headers):
			on_success.call(bzz_result)
			,  # ざわ‥
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)

# Operation logoutUser → GET /user/logout
# Logs out current logged in user session
func logout_user(
	on_success: Callable = Callable(),  # func(result)
	on_failure: Callable = Callable(),  # func(error: DemoApiError)
):
	# CollectionFormat: NO

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self.bee_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/v2/user/logout"

	# Collect the headers
	var bzz_headers := Dictionary()

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self.bee_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_result, bzz_code, bzz_headers):
			on_success.call(bzz_result)
			,  # ざわ‥
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)

# Operation updateUser → PUT /user/{username}
# Updated user
#
# This can only be done by the logged in user.
func update_user(
	# username: String   Eg: username_example
	# name that need to be deleted
	username: String,
	# demoUser: DemoUser
	# Updated user object
	demoUser: DemoUser,
	on_success: Callable = Callable(),  # func(result)
	on_failure: Callable = Callable(),  # func(error: DemoApiError)
):
	# CollectionFormat: NO

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self.bee_convert_http_method("PUT")

	# Compute the URL path to the API resource
	var bzz_path := "/v2/user/{username}".replace("{" + "username" + "}", bee_urlize_path_param(username))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_consumable_by_server := ['application/json']
	var bzz_found_producible_mime := false
	for bzz_mime in BEE_PRODUCIBLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_consumable_by_server:
			bzz_headers["Content-Type"] = bzz_mime
			bzz_found_producible_mime = true
			break
	if not bzz_found_producible_mime:
		# This is a bit strict, perhaps we could just push a warning and send JSON anyway?
		var error := DemoApiError.new()
		error.identifier = "update_user.headers.content_type"
		error.message = "That endpoint only accepts %s as content type(s) and none are supported by this client."
		on_failure.call(error)
		return

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null
	bzz_body = demoUser

	self.bee_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_result, bzz_code, bzz_headers):
			on_success.call(bzz_result)
			,  # ざわ‥
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)

