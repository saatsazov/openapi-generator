extends Resource
class_name {{>partials/api_config_class_name}}

{{>partials/disclaimer_autogenerated}}


# Configuration options for Api endpoints
# ---------------------------------------
#
# Its purpose is to help you share configuration customizations across Apis:
# - host & port
# - headers & security schemes
# - log level
# Since it is a Resource, you may use `ResourceSaver.save()` and `load()`
# to save it and load it from file, if you want.
#


# These are constant, immutable default values.
# To set different values at runtime, use the public properties below.
const BEE_DEFAULT_HOST := "{{#if host}}{{{host}}}{{else}}localhost{{/if}}"
const BEE_DEFAULT_PORT_HTTP := 80
const BEE_DEFAULT_PORT_HTTPS := 443
const BEE_DEFAULT_POLLING_INTERVAL_MS := 333  # milliseconds


# Configuration also handles logging because it's convenient.
# You may extend this class and override the log methods with your own if you need to.
enum LogLevel {
	SILENT,
	ERROR,
	WARNING,
	INFO,
	DEBUG,
}

{{!--
# Not sure if this should hold the HTTPClient instance or not.  Not for now.
# Godot's HTTP Client we are using.
# If none was set (by you), we'll make one.
var bee_client: HTTPClient:
	set(value):
		bee_client = value
	get:
		if not bee_client:
			bee_client = HTTPClient.new()
		return bee_client
--}}

# The host to connect to, with or without the protocol scheme.
# Eg: "gitea.com", "https://gitea.com"
# We toggle TLS accordingly to the provided scheme, if any.
@export var host := BEE_DEFAULT_HOST:
	set(value):
		if value.begins_with("https://"):
			ssl_enabled = true
			value = value.substr(8)  # "https://".length() == 8
		elif value.begins_with("http://"):
			ssl_enabled = false
			value = value.substr(7)  # "http://".length() == 7
		host = value


# Port through which the connection will be established.
# Note: changing the host may change the port as well if the scheme was provided, see above.
@export var port := BEE_DEFAULT_PORT_HTTP


# Headers used as base for all requests made by Api instances using this config.
# Those are the lowest priority headers, and are merged with custom headers provided in the bee_request() method call
# as well as the headers override below, to compute the final, actually sent headers.
@export var headers_base := {
	# Stigmergy: everyone does what is left to do (like ants do)
	"User-Agent": "Stigmergiac/1.0 (Godot)",
	# For my mental health's sake, only JSON is supported for now
	"Accept": "application/json",
	"Content-Type": "application/json",
}


# High-priority headers, they will always override other headers coming from the base above or the method call.
@export var headers_override := {}


# Duration of sleep between poll() calls.
@export var polling_interval_ms := BEE_DEFAULT_POLLING_INTERVAL_MS  # milliseconds


# Should we encrypt packets ?  Yes.  Let's encrypt !
@export var ssl_enabled := false:
	set(value):
		ssl_enabled = value
		port = BEE_DEFAULT_PORT_HTTPS if ssl_enabled else BEE_DEFAULT_PORT_HTTP


@export var verify_host := true  # only used if ssl is enabled


# @export_enum ain't working for ints yet
@export var log_level := LogLevel.WARNING

func log_error(message: String):
	if self.log_level >= LogLevel.ERROR:
		push_error(message)

func log_warning(message: String):
	if self.log_level >= LogLevel.WARNING:
		push_warning(message)

func log_info(message: String):
	if self.log_level >= LogLevel.INFO:
		print(message)

func log_debug(message: String):
	if self.log_level >= LogLevel.DEBUG:
		print(message)


{{#each authMethods}}
# Authentication method `{{name}}`.
{{#if isBasicBearer }}
# Basic Bearer Authentication `{{bearerFormat}}`
func set_security_{{name}}(value: String):
	self.headers_base["Authorization"] = "Bearer %s" % value


{{else if isApiKey }}
# Api Key Authentication `{{keyParamName}}`
func set_security_{{name}}(value: String):
	{{#if isKeyInHeader }}
	self.headers_base["{{keyParamName}}"] = value
	{{else if isKeyInQuery }}
	# Implementing this should be straightforward
	log_error("Api Key in Query is not supported at the moment.  (contribs welcome)")
	{{else if isKeyInCookie }}
	log_error("Api Key in Cookie is not supported at the moment.  (contribs welcome)")
	{{else }}
	log_error("Unrecognized Api Key format (contribs welcome).")
	{{/if}}


{{else}}
# â†’ Skipped because it's not implemented in the gdscript templates.  (contribs welcome)


{{/if}}
{{/each}}
